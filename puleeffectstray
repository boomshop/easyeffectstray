#!/usr/bin/env python3

PNG = """iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAMAAABrrFhUAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5r
c2NhcGUub3Jnm+48GgAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAwBQTFRFR3BMwjExiwoKuy0tpRsb
jwsLxDMzqBsbpB0djgsLpB4ejAoKvi4ugwICkg4OhwUFvS8vjgwMwzMzhwUFvy8vhgUFxjU1xDQ0
gwICqR8fhQQEiQcHxDMztSgowDAwpBsbiwgIxDQ0uCsrtyoqoRgYjwoKuywsnRgYggEBpx0dgwIC
oBgYjAkJlA8PgwICvS4uwzMzqB4erSIimxQUnxcXlA8PiAUFrSIipBsbuisrxzY2hQQEmRISryMj
wTExiAYGmBISuywssSQktyoqxjU1hgUFvi8vwzIyjgoKxzY2xjU1xjU1qyAgmhQUnhcXtioqxzU1
jQoKuy0tiQcHvzAwhwUFkQ0NtyoqryQkmRMTkAwMuCsrjgsLuiwskg4OtikpiwgIvS8v7u7u8vLy
vC4uigcHjAkJlhERhQQEwzMz5+fn6urq6+vrsiYm9vb2+fn59fX18PDw+vr65ubmlRAQsycnlA8P
/v39tCgo6Ojo6enp7e3t7OzsnRYW+Pj49/f38/Pz9PT0qyEhwDEx+/v7iAYG4+Pj5eXl5OTk/Pz8
7+/v8fHxxDQ0hAMDmhQUriMjlxISwTIyohoasSUlph0dqB4esCQknxcXhgQEmxUVrSIijwsLuSws
vi8v4uLi/v7+oRkZnhcXqiAgoxsbpx4epRwckw8PtSgoqR8fgwICxTU1mBISwjIynBUVrCIioBkZ
pBwcpBsboBgYkg0NtioqkA0NuCoqjwwMxzY2gQAAuSsrui0tjgoKiwkJvS4uggICvjAwsicnxjU1
lhAQlBAQkw4OtCcntSkplxERsSYmwTExrSMjmxQUmBMTggEBxjY2wjMznBYWrCEhqSAg4eHh////
3aGh3tfX4d/fwYeH89vb36Sk/Pb2womJ/fz868jI1sDA4qio8NjYvoSExYyMukhIuC8voDIy1L29
4dra+vPzwExMzqysw09P2p6e2MLCrygopzc3mRcXsysrpDQ00rCwqTk5x4+Pmy4u9/HxvjQ04dHR
0K6uyVNT9u/vx1JS0brRuwAAAFF0Uk5TAF4ZZxQr0QMIRQxTJs/OrxsjhF0vhcGjwKHbeN7VS+Vy
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
SUVORK5CYII="""

import io
import signal
import base64
import subprocess

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GdkPixbuf, GLib, Gio

class Icon ():
    
    icon = False
    
    def __init__ (self):
        stream = Gio.MemoryInputStream.new_from_bytes(GLib.Bytes(base64.b64decode(PNG)))
        image = GdkPixbuf.Pixbuf.new_from_stream(stream)
        self.icon = Gtk.StatusIcon()
        self.icon.set_from_pixbuf(image)
        self.icon.set_visible(True)
        self.icon.connect("popup-menu", self.rightclick)
        self.icon.connect("activate", self.leftclick)
    
    def quit (self, icon):
        os.system("pulseeffects -q")
        
    def rightclick (self, icon, button, time):
        self.menu = Gtk.Menu()
        
        presets = self.presetlist()
        outs = presets[0]
        ins = presets[1]
        
        self.add_presets(outs, "Output Presets:", self.menu)
        
        sep = Gtk.SeparatorMenuItem()
        self.menu.append(sep);
        
        self.add_presets(ins, "Input Presets:", self.menu)
        
        sep = Gtk.SeparatorMenuItem()
        self.menu.append(sep);
        
        qpe = Gtk.MenuItem()
        qpe.set_label("Quit PulseEffects")
        
        qicon = Gtk.MenuItem()
        qicon.set_label("Quit StatusIcon")

        qpe.connect("activate", self.quit)
        qicon.connect("activate", kill)

        self.menu.append(qpe)
        self.menu.append(qicon)

        self.menu.show_all()
        
        def pos(menu, icon):
            return (Gtk.StatusIcon.position_menu(menu, icon))
        self.menu.popup(None, None, None, self.icon, 0, time)
        
    def leftclick (self, icon):
        self.rightclick(icon, 0, Gtk.get_current_event_time())
    
    def add_presets(self, presets, title, menu):
        if not len(presets):
            return
        titem = Gtk.MenuItem()
        titem.set_label(title)
        titem.set_sensitive(False)
        menu.append(titem)
        for p in presets:
            pitem = Gtk.MenuItem()
            pitem.set_label(p)
            pitem.connect("activate", self.load_preset)
            menu.append(pitem)
    
    def load_preset(self, widget):
        subprocess.getoutput('pulseeffects -l "%s"' % widget.get_label())
        
    def presetlist (self):
        out = subprocess.getoutput('pulseeffects -p')
        pre = []
        for line in out.splitlines():
            arr = []
            atoms = line[line.index(":")+1:].split(",")
            for a in atoms:
                a = a.strip()
                if a:
                    arr.append(a)
            pre.append(arr)
        return pre
        
def kill(obj1, obj2 = False):
    Gtk.main_quit()
    
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGINT, kill)
    icon = Icon()
    Gtk.main()
